/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CustomerRole;

import Business.Customer.Customer;
import Business.EcoSystem;
import Business.Organization;
import Business.Restaurant.Dishes;
import Business.Restaurant.Restaurant;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequestTest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class MenuPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private int sum = 0;
    private UserAccount userAccount;
    private Restaurant restaurant;
    private EcoSystem system;
    ArrayList<Dishes> items = new ArrayList<Dishes>();
    
    /**
     * Creates new form RequestLabTestJPanel
     */
    
    public MenuPanel(JPanel userProcessContainer, UserAccount account, EcoSystem system, Restaurant restaurant) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.restaurant = restaurant;
        this.system = system;
        this.userAccount = account;
        populateTable();
        valueLabel.setText(restaurant.getName());
    }
    
     public void populateTable(){
        DefaultTableModel model = (DefaultTableModel) menuTable.getModel();
        model.setRowCount(0);
        Object[] row = new Object[3];
        for(Dishes dish:restaurant.getListOfDishes()){
            row[0] = dish;
            row[1] = dish.getDescriptionOfDish();
            row[2] = dish.getCostOfDish();
            model.addRow(row);
        }  
    }
     
     public void populateCart(Dishes item){
        DefaultTableModel model = (DefaultTableModel) cartTable.getModel();
        model.setRowCount(0);
        items.add(item);
        Object[] row = new Object[3];
        for(Dishes dish:items){
            row[0] = dish;
            row[1] = dish.getDescriptionOfDish();
            row[2] = dish.getCostOfDish();
            sum = sum + Integer.parseInt(dish.getCostOfDish());
            model.addRow(row);
        }  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cardBtn = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        valueLabel = new javax.swing.JLabel();
        enterpriseLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        cartTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        menuTable = new javax.swing.JTable();
        orderBtn1 = new javax.swing.JButton();
        RemoveBtn = new javax.swing.JButton();
        addressTxt = new javax.swing.JTextField();
        enterpriseLabel1 = new javax.swing.JLabel();
        enterpriseLabel2 = new javax.swing.JLabel();
        addressTxt1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cardBtn.setBackground(new java.awt.Color(255, 255, 255));
        cardBtn.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        cardBtn.setText("Add to Cart");
        cardBtn.setMaximumSize(new java.awt.Dimension(140, 30));
        cardBtn.setMinimumSize(new java.awt.Dimension(140, 30));
        cardBtn.setPreferredSize(new java.awt.Dimension(140, 30));
        cardBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cardBtnActionPerformed(evt);
            }
        });
        add(cardBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 150, 170, 60));

        backJButton.setBackground(new java.awt.Color(255, 255, 255));
        backJButton.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        backJButton.setText("<<Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 20, -1, 40));

        valueLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        valueLabel.setForeground(new java.awt.Color(255, 255, 255));
        valueLabel.setText("<value>");
        add(valueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 82, 130, 30));

        enterpriseLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        enterpriseLabel.setForeground(new java.awt.Color(255, 255, 255));
        enterpriseLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        enterpriseLabel.setText("Address:");
        add(enterpriseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 680, 120, 40));

        cartTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Dish Name", "Description", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(cartTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 330, 530, 100));

        menuTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Dish Name", "Description", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(menuTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 140, 550, 100));

        orderBtn1.setBackground(new java.awt.Color(255, 255, 255));
        orderBtn1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        orderBtn1.setText("Order");
        orderBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderBtn1ActionPerformed(evt);
            }
        });
        add(orderBtn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 680, -1, 50));

        RemoveBtn.setBackground(new java.awt.Color(255, 255, 255));
        RemoveBtn.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        RemoveBtn.setText("Remove From Cart");
        RemoveBtn.setMaximumSize(new java.awt.Dimension(140, 30));
        RemoveBtn.setMinimumSize(new java.awt.Dimension(140, 30));
        RemoveBtn.setPreferredSize(new java.awt.Dimension(140, 30));
        RemoveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveBtnActionPerformed(evt);
            }
        });
        add(RemoveBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 340, 200, 70));
        add(addressTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 690, 170, -1));

        enterpriseLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        enterpriseLabel1.setForeground(new java.awt.Color(255, 255, 255));
        enterpriseLabel1.setText("Order Description:");
        add(enterpriseLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 520, 180, 90));

        enterpriseLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        enterpriseLabel2.setForeground(new java.awt.Color(255, 255, 255));
        enterpriseLabel2.setText("Order Here:");
        add(enterpriseLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 80, 120, 30));
        add(addressTxt1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 510, 260, 110));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Business/food-gbcc99b878_1280.png"))); // NOI18N
        jLabel1.setPreferredSize(new java.awt.Dimension(820, 645));
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1290, 900));
    }// </editor-fold>//GEN-END:initComponents

    private void cardBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cardBtnActionPerformed

        int selectedRow = menuTable.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null,"Please select a row from the table to view details","Warning",JOptionPane.WARNING_MESSAGE);
        }
        else{
            Dishes item=(Dishes)menuTable.getValueAt(selectedRow, 0);
            populateCart(item);
        }
    }//GEN-LAST:event_cardBtnActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        CustomerAreaJPanel dwjp = (CustomerAreaJPanel) component;
        dwjp.populateTable();
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
        
    }//GEN-LAST:event_backJButtonActionPerformed

    private void orderBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderBtn1ActionPerformed
        // TODO add your handling code here:
        sum = 0;
        for(int i=0; i<cartTable.getRowCount(); i++){
            sum = sum + Integer.parseInt((String) cartTable.getValueAt(i, 2));
        }
        String address=addressTxt.getText();
        restaurant.addOrder(restaurant.getName(), userAccount.getUsername(), null, items, String.valueOf(sum) , address);
        for(Customer cust:system.getCustomerDirectory().getListOfCustomers()){
            if(userAccount.getUsername().equals(cust.getUserNameOfCustomer())){
                cust.addOrder(restaurant.getName(), userAccount.getUsername(), null, items, String.valueOf(sum) , address);
            }
        }
    }//GEN-LAST:event_orderBtn1ActionPerformed

    private void RemoveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveBtnActionPerformed
        // TODO add your handling code here:
         int selectedRow = cartTable.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null,"Please select a row from the table to view details","Warning",JOptionPane.WARNING_MESSAGE);
        }
        else{
            Dishes item=(Dishes)cartTable.getValueAt(selectedRow, 0);
            items.remove(item);
            DefaultTableModel model = (DefaultTableModel) cartTable.getModel();
            model.setRowCount(0);
            Object[] row = new Object[3];
                for(Dishes dish:items){
                    row[0] = dish;
                    row[1] = dish.getDescriptionOfDish();
                    row[2] = dish.getCostOfDish();
                    model.addRow(row);
                }
        }   
    }//GEN-LAST:event_RemoveBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton RemoveBtn;
    private javax.swing.JTextField addressTxt;
    private javax.swing.JTextField addressTxt1;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton cardBtn;
    private javax.swing.JTable cartTable;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JLabel enterpriseLabel1;
    private javax.swing.JLabel enterpriseLabel2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable menuTable;
    private javax.swing.JButton orderBtn1;
    private javax.swing.JLabel valueLabel;
    // End of variables declaration//GEN-END:variables
}
